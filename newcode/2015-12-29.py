
import numpy as np
import scipy as sp
import scipy.io as sio
import scipy.sparse as ss
import billogistic as bil
quit()

import numpy as np
import scipy as sp
import scipy.io as sio
import scipy.sparse as ss
import billogistic as bil
samples, Vdict, Ndict, Mdict, Y = bil.extdata() 
bil.main(samples, Vdict, Ndict, Mdict, Y, 2, 0.001, 0.00001) 
samples
len(samples) 
Vdict
Y
bil.main(samples, Vdict, Ndict, Mdict, Y, 2, 0.001, 0.00001)
bil.main(samples, Vdict, Ndict, Mdict, Y, 12, 0.001, 0.00001)
bil.main(samples, Vdict, Ndict, Mdict, Y, 12, 0.001, 0.00001)
reload(bil)
bil.main(samples, Vdict, Ndict, Mdict, Y, 12, 0.001, 0.00001)
bil.main(samples, Vdict, Ndict, Mdict, Y, 12, 0.001, 0.0001)
bil.main(samples, Vdict, Ndict, Mdict, Y, 12, 0.001, 0.001)
bil.main(samples, Vdict, Ndict, Mdict, Y, 12, 1, 0.001)
bil.main(samples, Vdict, Ndict, Mdict, Y, 12, 1, 1)
bil.main(samples, Vdict, Ndict, Mdict, Y, 12, 0.1, 0.1)
bil.main(samples, Vdict, Ndict, Mdict, Y, 12, 0.01, 0.1)
reload(bil)
bil.main(samples, Vdict, Ndict, Mdict, Y, 12, 0.01, 0.1)
samples, Vdict, Ndict, Mdict, Y = bil.extdata()
bil.main(samples, Vdict, Ndict, Mdict, Y, 12, 0.01, 0.1)
len(samples)
bil.main(samples, Vdict, Ndict, Mdict, Y, 12, 0.01, 0.1)
bil.main(samples, Vdict, Ndict, Mdict, Y, 12, 0.001, 0.1)
bil.main(samples, Vdict, Ndict, Mdict, Y, 12, 10, 0.1)
bil.main(samples, Vdict, Ndict, Mdict, Y, 12, 100, 0.1)
bil.main(samples, Vdict, Ndict, Mdict, Y, 12, 0, 0)
bil.main(samples, Vdict, Ndict, Mdict, Y, 12, 0, 1000)
reload(bil)
samples, Vdict, Ndict, Mdict, Y = bil.extdata()
bil.main(samples, Vdict, Ndict, Mdict, Y, 12, 0, 1000)
reload(bil)
samples, Vdict, Ndict, Mdict, Y = bil.extdata()
bil.main(samples, Vdict, Ndict, Mdict, Y, 12, 0, 1000)
bil.main(samples, Vdict, Ndict, Mdict, Y, 12, 0.1, 0.01)
bil.main(samples, Vdict, Ndict, Mdict, Y, 12, 0.01, 0.01)
bil.main(samples, Vdict, Ndict, Mdict, Y, 12, 0.0001, 0.01)
bil.main(samples, Vdict, Ndict, Mdict, Y, 12, 0.0001, 0.000001)
samples, Vdict, Ndict, Mdict, Y = bil.extdata(pp='on')
samples, Vdict, Ndict, Mdict, Y = bil.extdata(pp='in')
len(samples)
samples, Vdict, Ndict, Mdict, Y = bil.extdata(pp='on')
len(samples)
samples, Vdict, Ndict, Mdict, Y = bil.extdata(pp='in')
bil.main(samples, Vdict, Ndict, Mdict, Y, 12, 0.0001, 0.000001)
bil.main(samples, Vdict, Ndict, Mdict, Y, 2)
samples, Vdict, Ndict, Mdict, Y = bil.extdata(pp='for')
bil.main(samples, Vdict, Ndict, Mdict, Y, 2)
bil.main(samples, Vdict, Ndict, Mdict, Y, 12, 0.0001, 0.000001)
Y
samples
reload(bil)
bil.main(samples, Vdict, Ndict, Mdict, Y, 12, 0.0001, 0.000001)
reload(bil)
bil.main(samples, Vdict, Ndict, Mdict, Y, 12, 0.0001, 0.000001)
bil.main(samples, Vdict, Ndict, Mdict, Y, 12, 0.0001, 0.000001)
bil.main(samples, Vdict, Ndict, Mdict, Y, 12, 0.0001, 0.000001)
bil.main(samples, Vdict, Ndict, Mdict, Y, 12, 0.0001, 0.000001)
reload(bil)
bil.main(samples, Vdict, Ndict, Mdict, Y, 12, 0.0001, 0.000001)
reload(bil)
bil.main(samples, Vdict, Ndict, Mdict, Y, 12, 0.0001, 0.000001)
reload(bil)
bil.main(samples, Vdict, Ndict, Mdict, Y, 12, 0.0001, 0.000001)
reload(bil)
bil.main(samples, Vdict, Ndict, Mdict, Y, 12, 0.0001, 0.000001)
bil.main(samples, Vdict, Ndict, Mdict, Y, 12, 0.0001, 0.000001)
reload(bil)
bil.main(samples, Vdict, Ndict, Mdict, Y, 12, 0.0001, 0.000001)
reload(bil)
bil.main(samples, Vdict, Ndict, Mdict, Y, 12, 0.0001, 0.000001)
reload(bil)
bil.main(samples, Vdict, Ndict, Mdict, Y, 12, 0.0001, 0.000001)
bil.main(samples, Vdict, Ndict, Mdict, Y, 12, 0.0001, 0.000001)
reload(bil)
bil.main(samples, Vdict, Ndict, Mdict, Y, 12, 0.0001, 0.000001)
cleantr
reload(bil)
bil.main(samples, Vdict, Ndict, Mdict, Y, 12, 0.0001, 0.000001)
reload(bil)
bil.main(samples, Vdict, Ndict, Mdict, Y, 12, 0.0001, 0.000001)
reload(bil)
bil.main(samples, Vdict, Ndict, Mdict, Y, 12, 0.0001, 0.000001)
reload(bil)
bil.main(samples, Vdict, Ndict, Mdict, Y, 12, 0.0001, 0.000001)
reload(bil)
bil.main(samples, Vdict, Ndict, Mdict, Y, 12, 0.0001, 0.000001)
reload(bil)
bil.main(samples, Vdict, Ndict, Mdict, Y, 12, 0.0001, 0.000001)
reload(bil)
bil.main(samples, Vdict, Ndict, Mdict, Y, 12, 0.0001, 0.000001)
bil.main(samples, Vdict, Ndict, Mdict, Y, 100, 0.001, 0.000001)
bil.main(samples, Vdict, Ndict, Mdict, Y, 100, 0.01, 0.000001)
reload(bil)
bil.main(samples, Vdict, Ndict, Mdict, Y, 100, 0.01, 0.001)
bil.main(samples, Vdict, Ndict, Mdict, Y, 100, 0.1, 0.001)
bil.main(samples, Vdict, Ndict, Mdict, Y, 100, 0.1, 0.01)
bil.main(samples, Vdict, Ndict, Mdict, Y, 100, 0.01, 0.1)
bil.main(samples, Vdict, Ndict, Mdict, Y, 100, 0.001, 0.001)
bil.main(samples, Vdict, Ndict, Mdict, Y, 100, 0.1, 0.001)
bil.main(samples, Vdict, Ndict, Mdict, Y, 100, 0.1, 10)
bil.main(samples, Vdict, Ndict, Mdict, Y, 100, 0.1, 1)
bil.main(samples, Vdict, Ndict, Mdict, Y, 100, 0.1, 0.1)
bil.main(samples, Vdict, Ndict, Mdict, Y, 100, 1, 0.01)
bil.main(samples, Vdict, Ndict, Mdict, Y, 100, 0.1, 0.1)
reload(bil)
reload(bil)
bil.main(samples, Vdict, Ndict, Mdict, Y, 100, 0.1, 0.1)
reload(bil)
bil.main(samples, Vdict, Ndict, Mdict, Y, 100, 0.1, 0.1)
reload(bil)
bil.main(samples, Vdict, Ndict, Mdict, Y, 100, 0.1, 0.1)
reload(bil)
bil.main(samples, Vdict, Ndict, Mdict, Y, 100, 0.1, 0.1)
bil.main(samples, Vdict, Ndict, Mdict, Y, 100, 0.01, 0.1)
bil.main(samples, Vdict, Ndict, Mdict, Y, 100, 0.01, 0.01)
reload(bil)
bil.main(samples, Vdict, Ndict, Mdict, Y, 100, 0.01, 0.01)
reload(bil)
bil.main(samples, Vdict, Ndict, Mdict, Y, 100, 0.01, 0.01)
reload(bil)
bil.main(samples, Vdict, Ndict, Mdict, Y, 100, 0.01, 0.01)
bil.main(samples, Vdict, Ndict, Mdict, Y, 100, 0.01, 0.01)
reload(bil)
bil.main(samples, Vdict, Ndict, Mdict, Y, 100, 0.01, 0.01)
reload(bil)
bil.main(samples, Vdict, Ndict, Mdict, Y, 100, 0.01, 0.01)
reload(bil)
bil.main(samples, Vdict, Ndict, Mdict, Y, 100, 0.01, 0.01)
reload(bil)
bil.main(samples, Vdict, Ndict, Mdict, Y, 100, 0.01, 0.01)
reload(bil)
bil.main(samples, Vdict, Ndict, Mdict, Y, 100, 0.01, 0.01)
reload(bil)
bil.main(samples, Vdict, Ndict, Mdict, Y, 100, 0.01, 0.01)
bil.main(samples, Vdict, Ndict, Mdict, Y, 100, 0.01, 0.01)
reload(bil)
bil.main(samples, Vdict, Ndict, Mdict, Y, 100, 0.01, 0.01)
bil.main(samples, Vdict, Ndict, Mdict, Y, 100, 0.01, 0.01)
reload(bil)
bil.main(samples, Vdict, Ndict, Mdict, Y, 100, 0.01, 0.01)
reload(bil)
bil.main(samples, Vdict, Ndict, Mdict, Y, 100, 0.01, 0.01)
reload(bil)
bil.main(samples, Vdict, Ndict, Mdict, Y, 100, 0.01, 0.01)
reload(bil)
bil.main(samples, Vdict, Ndict, Mdict, Y, 100, 0.01, 0.01)
reload(bil)
bil.main(samples, Vdict, Ndict, Mdict, Y, 100, 0.01, 0.01)
bil.main(samples, Vdict, Ndict, Mdict, Y, 100, 0.01, 0.01)
bil.main(samples, Vdict, Ndict, Mdict, Y, 100, 0.01, 0.01)
reload(bil)
bil.main(samples, Vdict, Ndict, Mdict, Y, 100, 0.01, 0.01)
reload(bil)
bil.main(samples, Vdict, Ndict, Mdict, Y, 100, 0.01, 0.01)
reload(bil)
bil.main(samples, Vdict, Ndict, Mdict, Y, 100, 0.01, 0.01)
reload(bil)
bil.main(samples, Vdict, Ndict, Mdict, Y, 100, 0.01, 0.01)
reload(bil)
bil.main(samples, Vdict, Ndict, Mdict, Y, 100, 0.01, 0.01)
reload(bil)
bil.main(samples, Vdict, Ndict, Mdict, Y, 100, 0.01, 0.01)
reload(bil)
bil.main(samples, Vdict, Ndict, Mdict, Y, 100, 0.01, 0.01)
reload(bil)
bil.main(samples, Vdict, Ndict, Mdict, Y, 100, 0.01, 0.01)
reload(bil)
bil.main(samples, Vdict, Ndict, Mdict, Y, 100, 0.01, 0.01)
reload(bil)
bil.main(samples, Vdict, Ndict, Mdict, Y, 100, 0.01, 0.01)
reload(bil)
bil.main(samples, Vdict, Ndict, Mdict, Y, 100, 0.01, 0.01)
bil.main(samples, Vdict, Ndict, Mdict, Y, 100, 0.01, 0.01)
reload(bil)
bil.main(samples, Vdict, Ndict, Mdict, Y, 100, 0.01, 0.01)
reload(bil)
bil.main(samples, Vdict, Ndict, Mdict, Y, 100, 0.01, 0.01)
reload(bil)
bil.main(samples, Vdict, Ndict, Mdict, Y, 100, 0.01, 0.01)
reload(bil)
bil.main(samples, Vdict, Ndict, Mdict, Y, 100, 0.01, 0.01)
reload(bil)
bil.main(samples, Vdict, Ndict, Mdict, Y, 100, 0.01, 0.01)
reload(bil)
bil.main(samples, Vdict, Ndict, Mdict, Y, 100, 0.001, 0.001)
bil.main(samples, Vdict, Ndict, Mdict, Y, 100, 0.0001, 0.001)
bil.main(samples, Vdict, Ndict, Mdict, Y, 100, 0.001, 0.0001)
samples, Vdict, Ndict, Mdict, Y = bil.extdata(pp='for')
bil.main(samples, Vdict, Ndict, Mdict, Y, 100, 0.001, 0.0001)
samples, Vdict, Ndict, Mdict, Y = bil.extdata(pp='in')
bil.main(samples, Vdict, Ndict, Mdict, Y, 100, 0.001, 0.0001)
get_ipython().system(u'top')
reload(bil)
bil.main()
bil.training()
reload(bil)
bil.training()
reload(bil)
bil.training()
reload(bil)
bil.training()
bil.training()
reload(bil)
bil.training()
bil.training(prep='in')
bil.training(prep='from')
bil.training(prep='with')
reload(bil)
bil.training(prep='with', reg='l2')
bil.training(prep='on', reg='l2')
reload(bil)
bil.training(prep='on', reg='l2')
reload(bil)
bil.training(prep='on', reg='l2')
bil.training(prep='as', reg='l2')
reload(bil)
bil.training(prep='as', reg='l2')
bil.training(prep='as', reg='nn')
bil.training(prep='with', reg='nn')
bil.training(prep='for', reg='nn')
bil.training(prep='from', reg='nn')
bil.training(prep='from', reg='l2')
bil.training(prep='from', reg='l1')
bil.training(prep='in', reg='nn')
bil.training(prep='in', reg='l2')
bil.training(prep='in', reg='nn')
bil.training(prep='on', reg='nn')
reload(bil)
bil.training(prep='on', reg='nn')
bil.training(prep='in', reg='nn')
import logreg as lr
import logreg as lr
reload(lr) 
import logreg as lr
import logreg as lr
import logisticVanilla as lV
traindata = [(d.strip().split()[1:5], d.strip().split()[5]) for d in
                open('clean/cleantrain.txt') if d.strip().split()[3] == pp]
traindata = [(d.strip().split()[1:5], d.strip().split()[5]) for d in
                open('datasets/cleantrain.txt') if d.strip().split()[3] == pp]
traindata = [(d.strip().split()[1:5], d.strip().split()[5]) for d in
                open('datasets/cleantrain.txt') if d.strip().split()[3] == 'in']
from logisticVanilla import BinaryMaxentFeatureEncoding as BMFE
BMFE.train(traindata) 
reload(lV)
reload(BMFE) 
from logisticVanilla import BinaryMaxentFeatureEncoding as BMFE
BMFE.train(traindata)
traindata[0]
traindict = dict(traindata)
bil.training(prep='in', reg='nn')
reload(BMFE)
reload(bil) 
reload(bil)
top
bil.training(prep='qwith', reg='nn')
bil.training(prep='with', reg='nn')
get_ipython().magic(u'ls ')
